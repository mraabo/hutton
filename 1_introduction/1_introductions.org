#+title: 1 Introduction
* 1-1
Among other variations we can use one where the inner function is evaluated first, and where the operator is evaluated before the operands (contrary to the example on p. 21).

This will result in the evaluation:
#+begin_src
double (double 2)
  = { applying the inner double }
    double (2 + 2)
  = { applying double }
    (2 + 2) + (2 + 2)
  = { applying + }
    8
#+end_src

* 1-2
Using the recursive definition of sum on p. 28, we have that:
#+begin_src
sum [x]
  = { applying sum }
    x + sum []
  = { applying sum }
    x + 0
  = { applying + }
    x
#+end_src

* 1-3
Let =product= be defined as:
#+begin_src Haskell
product [] = 1
product (n:ns) = n * product ns
#+end_src

Then we can evaluate =product [2,3,4]= in the following way:
#+begin_src
product [2,3,4]
  = { evaluate product }
    2 * product [3,4]
  = { evaluate product }
    2 * 3 * product [4]
  = { evaluate product }
    2 * 3 * 4 * product []
  = { evaluate product }
    2 * 3 * 4 * 1
  = { evaluate * }
    24
#+end_src

* 1-4
To make =qsort= sort from largest to smallest, it should be modified such that =larger= is appended in front of =x= and =smaller= after =x=. This results in:
#+begin_src
qsort [] = []
qsort (x:xs) = qsort larger ++ [x] ++ qsort smaller
               where
                 smaller = [a | a <- xs, a <= x]
                 larger  = [b | b <- xs, b > x]
#+end_src

* 1-5
The lists =smaller= and =larger= will not be defined for a = x or b = x, thus this value will be discarded and not contained in the final results.

For =qsort [2,2,3,1,1]= we have in the first iteration that x = 2, =smaller = [1, 1]= and `larger = [3]`. We see here that no list contains the 2nd element of value 2, which has been discarded.
We then have for `qsort smaller` that x = 1 and `smaller = []` and `larger = []`, thus having discarded the 2nd element in `smaller` of value 1.
The result will therefore be `[1, 2, 3]` showing how we have discarded duplicate values.
