#+title: 6 Recursive Functions

* 6-1
The factorial function does not have a pattern that matches negative numbers. It
can be extended to catch such by inserting the gaurd in the general case =n > 0=.
#+begin_src haskell
fac :: Int -> Int
:{
fac 0           = 1
fac n | n > 0   = n * fac (n-1)
:}
fac 3
#+end_src

#+RESULTS:
6

* 6-2
#+begin_src haskell
sumdown :: Int -> Int
:{
sumdown 0 = 0
sumdown n = n + sumdown (n - 1)
:}
sumdown 3
#+end_src

#+RESULTS:
6

* 6-3
#+begin_src haskell
import Debug.Trace (trace)

(^) :: Int -> Int
:{
m ^ 0 = 1
m ^ n = trace (show m ++ "^" ++ show n) (m * (m ^ (n-1)))
:}

2^3
#+end_src

#+RESULTS:
2^3
2^2
2^1
8

* 6-4
#+begin_src haskell
import Debug.Trace (trace)

euclid :: Int -> Int -> Int
:{
euclid m n | m >= n     = n
euclid m n = trace (show m ++ " " ++ show n) (euclid m (n - m))
:}

euclid 6 27
#+end_src

#+RESULTS:
6 27
6 21
6 15
6 9
3

* 6-5
#+begin_src haskell
length [1,2,3]
1 + length[2,3]
1 + 1 + length [3]
1 + 1 + 1 + length[]
3
#+end_src

#+begin_src haskell
drop 3 [1,2,3,4,5]
drop 2 [2,3,4,5]
drop 1 [3,4,5]
drop 0 [4,5]
[4,5]
#+end_src

#+begin_src haskell
init [1,2,3]
1 : init [2,3]
1 : 2 : init [3]
1 : 2 : []
[1,2]
#+end_src

* 6-6
*** a
#+begin_src haskell
and :: [Bool] -> Bool
:{
and [True] = True
and (x:xs) | x == True  = and xs
and (x:xs) | x == False = False
:}

(and [True, True, False], and [True, True, True])
#+end_src

#+RESULTS:
(False,True)
*** b
#+begin_src haskell
concat :: [[a]] -> [a]
:{
concat [[_]] = [_]
concat [(x:xs)] = x : xs
:}

concat [[1,2], [3], [4, 5]]
#+end_src

#+RESULTS:
[1,2,3,4,5]
*** c
#+begin_src haskell
replicate :: Int -> a -> [a]
:{
replicate 0 x = []
replicate n x = x : replicate (n-1) x
:}

replicate 6 42
#+end_src

#+RESULTS:
[42,42,42,42,42,42]

*** d
#+begin_src haskell
(!!) :: [a] -> Int -> a
:{
[_] !! 1 = [_]
(x:xs) !! n = xs !! (n-1)
:}

[0, 1, 2, 3, 4] !! 3
#+end_src

#+RESULTS:
3

*** e
#+begin_src haskell
elem :: Eq a => a -> [a] -> Bool
:{
elem y [] = False
elem y (x:xs) | y == x  = True
elem y (x:xs) | y /= x  = elem y xs
:}

(elem 3 [1,2,3,4], elem 42 [1,2,3])
#+end_src

#+RESULTS:
(True,False)

* 6-7
#+begin_src haskell
merge :: Ord a => [a] -> [a] -> [a]
:{
merge [] ys = ys
merge xs [] = xs
merge (x:xs) (y:ys) | x <= y    = x : merge xs (y:ys)
merge (x:xs) (y:ys) | x > y     = y : merge (x:xs) ys
:}

merge [2,5,6] [1,3,4]
#+end_src

#+RESULTS:
[1,2,3,4,5,6]

* 6-8
#+begin_src haskell
import Data.List
import Debug.Trace (trace)

merge :: Ord a => [a] -> [a] -> [a]
:{
merge [] ys = ys
merge xs [] = xs
merge (x:xs) (y:ys) | x <= y    = x : merge xs (y:ys)
merge (x:xs) (y:ys) | x > y     = y : merge (x:xs) ys
:}

halve :: [a] -> ([a],[a])
:{
halve xs = (take n xs, drop n xs)
           where n = length xs `div` 2
:}

msort :: Ord a => [a] -> [a]
:{
msort [] = []
msort xs | length xs == 1       = xs
msort xs = trace (show xs) (merge (msort $ fst $ halve xs) (msort $ snd $ halve xs))
:}

msort [6,5,4,3,2,1]
#+end_src

#+RESULTS:
()
[6,5,4,3,2,1]
[6,5,4]
[5,4]
[3,2,1]
[2,1]
[1,2,3,4,5,6]

* 6-9
*** a.
#+begin_src haskell
sum :: Num a => [a] -> Int
:{
sum [] = 0
sum (x:xs) = x + sum xs
:}

sum [1,2,3,4]
#+end_src

#+RESULTS:
10

*** b.
#+begin_src haskell
take :: Int -> [a] -> [a]
:{
take 0 xs = []
take n (x:xs) = x : take (n-1) xs
:}

take 5 [1,2,3,4,5,6]
#+end_src

#+RESULTS:
[1,2,3,4,5]

*** c.
#+begin_src haskell
import Data.List

last :: [a] -> a
:{
last [x] | length [x] == 1        = x
last (x:xs) = last xs
:}

last [1,2,3,4]
#+end_src

#+RESULTS:
4
